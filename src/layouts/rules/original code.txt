{
    "LRId": "1706531669190",
    "rule": [
        {
            "id": "1706531652409",
            "Balance": {
                "operator": ">",
                "value": "500000"
            },
            "Set Participant Data": "w45"
        },
        {
            "id": "1706531661037",
            "Balance": {
                "operator": ">",
                "value": "300000"
            },
            "Set Participant Data": "rrr"
        }
    ]
}
<DataTable
  table={{
    columns: [
      { Header: "ID", accessor: "id", width: "25%" },
      { Header: "Name", accessor: "name", width: "30%" },
      { Header: "Description", accessor: "description" },
      // { Header: "age", accessor: "age", width: "12%" },
    ],
    rows: [
      {
        name: "Hanny Baniard",
        position: "Data Coordiator",
        office: "Baorixile",
        age: 42,
        startDate: "4/11/2021",
        salary: "$474,978",
      },
      {
        name: "Lara Puleque",
        position: "Payment Adjustment Coordinator",
        office: "Cijangkar",
        age: 47,
        startDate: "8/2/2021",
        salary: "$387,287",
      },
      {
        name: "Torie Repper",
        position: "Administrative Officer",
        office: "Montpellier",
        age: 25,
        startDate: "4/21/2021",
        salary: "$94,780",
      },
      {
        name: "Nat Gair",
        position: "Help Desk Technician",
        office: "Imider",
        age: 57,
        startDate: "12/6/2020",
        salary: "$179,177",
      },
      {
        name: "Maggi Slowan",
        position: "Help Desk Technician",
        office: "Jaunpils",
        age: 56,
        startDate: "11/7/2020",
        salary: "$440,874",
      },
      {
        name: "Marleah Snipe",
        position: "Account Representative II",
        office: "Orekhovo-Borisovo Severnoye",
        age: 31,
        startDate: "7/18/2021",
        salary: "$404,983",
      },
      {
        name: "Georgia Danbury",
        position: "Professor",
        office: "Gniezno",
        age: 50,
        startDate: "10/1/2020",
        salary: "$346,576",
      },
      {
        name: "Bev Castan",
        position: "Design Engineer",
        office: "Acharnés",
        age: 19,
        startDate: "1/14/2021",
        salary: "$445,171",
      },
      {
        name: "Reggi Westney",
        position: "Financial Advisor",
        office: "Piuí",
        age: 56,
        startDate: "3/21/2021",
        salary: "$441,569",
      },
      {
        name: "Bartholomeus Prosh",
        position: "Project Manager",
        office: "Kelīshād va Sūdarjān",
        age: 28,
        startDate: "5/27/2021",
        salary: "$336,238",
      },
      {
        name: "Sheffy Feehely",
        position: "Software Consultant",
        office: "Ndibène Dahra",
        age: 27,
        startDate: "3/23/2021",
        salary: "$473,391",
      },
      {
        name: "Euphemia Chastelain",
        position: "Engineer IV",
        office: "Little Baguio",
        age: 63,
        startDate: "5/1/2021",
        salary: "$339,489",
      },
    ]
  }}
/>

//// code for onrowClick
/**
=========================================================
* Material Dashboard 2 React - v2.2.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-react
* Copyright 2023 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useMemo, useEffect, useState } from "react";

// prop-types is a library for typechecking of props
import PropTypes from "prop-types";

// react-table components
import { useTable, usePagination, useGlobalFilter, useAsyncDebounce, useSortBy } from "react-table";

// @mui material components
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableContainer from "@mui/material/TableContainer";
import TableRow from "@mui/material/TableRow";
import Icon from "@mui/material/Icon";
import Autocomplete from "@mui/material/Autocomplete";

// Material Dashboard 2 React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDPagination from "components/MDPagination";

// Material Dashboard 2 React example components
import DataTableHeadCell from "examples/Tables/DataTable/DataTableHeadCell";
import DataTableBodyCell from "examples/Tables/DataTable/DataTableBodyCell";

function DataTable({
  entriesPerPage,
  canSearch,
  showTotalEntries,
  table,
  pagination,
  isSorted,
  noEndBorder,
  onRowClick,
}) {
  
  const defaultValue = entriesPerPage.defaultValue ? entriesPerPage.defaultValue : 5;
  const entries = entriesPerPage.entries
    ? entriesPerPage.entries.map((el) => el.toString())
    : ["5", "10", "15", "20", "25"];
  const columns = useMemo(() => table.columns, [table]);
  const data = useMemo(() => table.rows, [table]);

  const tableInstance = useTable(
    { columns, data, initialState: { pageIndex: 0 } },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    rows,
    page,
    pageOptions,
    canPreviousPage,
    canNextPage,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    setGlobalFilter,
    state: { pageIndex, pageSize, globalFilter },
  } = tableInstance;

  // Set the default value for the entries per page when component mounts
  useEffect(() => setPageSize(defaultValue || 10), [defaultValue]);

  // Set the entries per page value based on the select value
  const setEntriesPerPage = (value) => setPageSize(value);

  // Render the paginations
  const renderPagination = pageOptions.map((option) => (
    <MDPagination
      item
      key={option}
      onClick={() => gotoPage(Number(option))}
      active={pageIndex === option}
    >
      {option + 1}
    </MDPagination>
  ));

  // Handler for the input to set the pagination index
  const handleInputPagination = ({ target: { value } }) =>
    value > pageOptions.length || value < 0 ? gotoPage(0) : gotoPage(Number(value));

  // Customized page options starting from 1
  const customizedPageOptions = pageOptions.map((option) => option + 1);

  // Setting value for the pagination input
  const handleInputPaginationValue = ({ target: value }) => gotoPage(Number(value.value - 1));

  // Search input value state
  const [search, setSearch] = useState(globalFilter);

  // Search input state handle
  const onSearchChange = useAsyncDebounce((value) => {
    setGlobalFilter(value || undefined);
  }, 100);

  // A function that sets the sorted value for the table
  const setSortedValue = (column) => {
    let sortedValue;

    if (isSorted && column.isSorted) {
      sortedValue = column.isSortedDesc ? "desc" : "asce";
    } else if (isSorted) {
      sortedValue = "none";
    } else {
      sortedValue = false;
    }

    return sortedValue;
  };

  // Setting the entries starting point
  const entriesStart = pageIndex === 0 ? pageIndex + 1 : pageIndex * pageSize + 1;

  // Setting the entries ending point
  let entriesEnd;

  if (pageIndex === 0) {
    entriesEnd = pageSize;
  } else if (pageIndex === pageOptions.length - 1) {
    entriesEnd = rows.length;
  } else {
    entriesEnd = pageSize * (pageIndex + 1);
  }

  return (
    <TableContainer sx={{ boxShadow: "none" }}>
      {entriesPerPage || canSearch ? (
        <MDBox display="flex" justifyContent="space-between" alignItems="center" p={3}>
          {entriesPerPage && (
            <MDBox display="flex" alignItems="center">
              <Autocomplete
                disableClearable
                value={pageSize.toString()}
                options={entries}
                onChange={(event, newValue) => {
                  setEntriesPerPage(parseInt(newValue, 10));
                }}
                size="small"
                sx={{ width: "5rem" }}
                renderInput={(params) => <MDInput {...params} />}
              />
              <MDTypography variant="caption" color="secondary">
                &nbsp;&nbsp;entries per page
              </MDTypography>
            </MDBox>
          )}
          {canSearch && (
            <MDBox width="12rem" ml="auto">
              <MDInput
                placeholder="Search..."
                value={search}
                size="small"
                fullWidth
                onChange={({ currentTarget }) => {
                  setSearch(search);
                  onSearchChange(currentTarget.value);
                }}
              />
            </MDBox>
          )}
        </MDBox>
      ) : null}
      
      <Table {...getTableProps()}>
        <MDBox component="thead">
          {headerGroups.map((headerGroup, key) => (
            <TableRow key={key} {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map((column, idx) => (
                <DataTableHeadCell
                  key={idx}
                  {...column.getHeaderProps(isSorted && column.getSortByToggleProps())}
                  width={column.width ? column.width : "auto"}
                  align={column.align ? column.align : "left"}
                  sorted={setSortedValue(column)}
                >
                  {column.render("Header")}
                </DataTableHeadCell>
              ))}
            </TableRow>
          ))}
        </MDBox>
        <TableBody {...getTableBodyProps()}>
          {page.map((row, key) => {
            prepareRow(row);
            return (
              <TableRow
                key={key}
                {...row.getRowProps()}
                onClick={() => onRowClick && onRowClick(row.original)} // Invoke onRowClick when a row is clicked
                style={{ cursor: onRowClick ? "pointer" : "default" }} // Change cursor style if onRowClick is provided
              >
                {row.cells.map((cell, idx) => (
                  <DataTableBodyCell
                    key={idx}
                    noBorder={noEndBorder && rows.length - 1 === key}
                    align={cell.column.align ? cell.column.align : "left"}
                    {...cell.getCellProps()}
                  >
                    {cell.render("Cell")}
                  </DataTableBodyCell>
                ))}
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
      {/* <Table {...getTableProps()}>
        <MDBox component="thead">
          {headerGroups.map((headerGroup, key) => (
            <TableRow key={key} {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map((column, idx) => (
                <DataTableHeadCell
                  key={idx}
                  {...column.getHeaderProps(isSorted && column.getSortByToggleProps())}
                  width={column.width ? column.width : "auto"}
                  align={column.align ? column.align : "left"}
                  sorted={setSortedValue(column)}
                >
                  {column.render("Header")}
                </DataTableHeadCell>
              ))}
            </TableRow>
          ))}
        </MDBox>
        <TableBody {...getTableBodyProps()}>
          {page.map((row, key) => {
            prepareRow(row);
            return (
              <TableRow key={key} {...row.getRowProps()}>
                {row.cells.map((cell, idx) => (
                  <DataTableBodyCell
                    key={idx}
                    noBorder={noEndBorder && rows.length - 1 === key}
                    align={cell.column.align ? cell.column.align : "left"}
                    {...cell.getCellProps()}
                  >
                    {cell.render("Cell")}
                  </DataTableBodyCell>
                ))}
              </TableRow>
            );
          })}
        </TableBody>
      </Table> */}

      <MDBox
        display="flex"
        flexDirection={{ xs: "column", sm: "row" }}
        justifyContent="space-between"
        alignItems={{ xs: "flex-start", sm: "center" }}
        p={!showTotalEntries && pageOptions.length === 1 ? 0 : 3}
      >
        {showTotalEntries && (
          <MDBox mb={{ xs: 3, sm: 0 }}>
            <MDTypography variant="button" color="secondary" fontWeight="regular">
              Showing {entriesStart} to {entriesEnd} of {rows.length} entries
            </MDTypography>
          </MDBox>
        )}
        {pageOptions.length > 1 && (
          <MDPagination
            variant={pagination.variant ? pagination.variant : "gradient"}
            color={pagination.color ? pagination.color : "info"}
          >
            {canPreviousPage && (
              <MDPagination item onClick={() => previousPage()}>
                <Icon sx={{ fontWeight: "bold" }}>chevron_left</Icon>
              </MDPagination>
            )}
            {renderPagination.length > 6 ? (
              <MDBox width="5rem" mx={1}>
                <MDInput
                  inputProps={{ type: "number", min: 1, max: customizedPageOptions.length }}
                  value={customizedPageOptions[pageIndex]}
                  onChange={(handleInputPagination, handleInputPaginationValue)}
                />
              </MDBox>
            ) : (
              renderPagination
            )}
            {canNextPage && (
              <MDPagination item onClick={() => nextPage()}>
                <Icon sx={{ fontWeight: "bold" }}>chevron_right</Icon>
              </MDPagination>
            )}
          </MDPagination>
        )}
      </MDBox>
    </TableContainer>
  );
}

// Setting default values for the props of DataTable
DataTable.defaultProps = {
  entriesPerPage: { defaultValue: 10, entries: [5, 10, 15, 20, 25] },
  canSearch: true,
  showTotalEntries: true,
  pagination: { variant: "gradient", color: "info" },
  isSorted: true,
  noEndBorder: false,
};

// Typechecking props for the DataTable
DataTable.propTypes = {
  entriesPerPage: PropTypes.oneOfType([
    PropTypes.shape({
      defaultValue: PropTypes.number,
      entries: PropTypes.arrayOf(PropTypes.number),
    }),
    PropTypes.bool,
  ]),
  canSearch: PropTypes.bool,
  showTotalEntries: PropTypes.bool,
  table: PropTypes.objectOf(PropTypes.array).isRequired,
  pagination: PropTypes.shape({
    variant: PropTypes.oneOf(["contained", "gradient"]),
    color: PropTypes.oneOf([
      "primary",
      "secondary",
      "info",
      "success",
      "warning",
      "error",
      "dark",
      "light",
    ]),
  }),
  isSorted: PropTypes.bool,
  noEndBorder: PropTypes.bool,
};

export default DataTable;


<DataTable
                table={{
                  columns: [
                    { Header: "ID", accessor: "id", width: "25%" },
                    { Header: "Name", accessor: "name", width: "30%" },
                    { Header: "Description", accessor: "description" },
                    { Header: "Actions", accessor: "actions", width: "15%", Cell: DeleteColumn }
                    // { Header: "age", accessor: "age", width: "12%" },
                  ],
                  rows: tableData }}

                  onRowClick={(rowData) => {
                    // Handle row click, e.g., navigate to a detail page
                    console.log("Row Clicked:", rowData);
                  }}
                  />
--------------------------------------------

const [conditionData, setConditionData] = useState([]);

// Function to add a new condition for a specific row
const addCondition = (rowId, conditionName) => {
  setConditionData((prevData) => [
    ...prevData,
    { rowId, conditionName, operator: "", value: "" },
  ]);
};

// Function to handle operator selection for a specific row
const handleOperatorChange = (rowId, conditionName, operator) => {
  setConditionData((prevData) =>
    prevData.map((item) =>
      item.rowId === rowId && item.conditionName === conditionName
        ? { ...item, operator }
        : item
    )
  );
};

// Function to handle value selection for a specific row
const handleValueChange = (rowId, conditionName, value) => {
  setConditionData((prevData) =>
    prevData.map((item) =>
      item.rowId === rowId && item.conditionName === conditionName
        ? { ...item, value }
        : item
    )
  );
};




const dynamicColumns = useMemo(() => {
  const baseColumns = [
    { Header: "ID", accessor: "id", width: "15%" },
  ];

  // Add columns for conditions dynamically
  const dynamicColumns = conditions.map((condition) => ({
    Header: condition,
    accessor: condition,
    width: "20%",
    Cell: ({ row }) => (
      <div>
        <select
          value={conditionData.find(
            (item) => item.rowId === row.original.id && item.conditionName === condition
          )?.operator || ""}
          onChange={(e) =>
            handleOperatorChange(row.original.id, condition, e.target.value)
          }
        >
          <option value="">Select Operator</option>
          <option value="equals">Equals</option>
          <option value="contains">Contains</option>
          {/* Add more operators as needed */}
        </select>
        <input
          type="text"
          value={conditionData.find(
            (item) => item.rowId === row.original.id && item.conditionName === condition
          )?.value || ""}
          onChange={(e) =>
            handleValueChange(row.original.id, condition, e.target.value)
          }
        />
      </div>
    ),
  }));

  return [...baseColumns, ...dynamicColumns];
}, [conditions, conditionData]);
